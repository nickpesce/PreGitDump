import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;


public class GameCanvas extends Canvas{

	BufferStrategy buffer;
	
	public static final int
	LOADING = 0;
	
	private double scaleX, scaleY;
	private Game game;
	public GameCanvas(Game game)
	{
		//setIgnoreRepaint(true);
		this.game = game;
		updateScale(game.getFrame());
	}
	
	/**
	 * Overrides the Canvas paint method to use the games paint method. When resized, it will repaint accordingly.
	 */
	@Override
	public void paint(Graphics g)
	{
		game.repaint();
	}

	/**
	 * Updates the scaleX and scaleY variables according to the size of the frame
	 * @param frame the JFrame to use for the size.
	 */
	public void updateScale(JFrame frame)
	{
		Insets decoration = frame.getInsets();
		int availableHeight = (frame.getHeight() - decoration.top - decoration.bottom);
		int availableWidth = (frame.getWidth() - decoration.left - decoration.right);
		setMinimumSize(new Dimension(availableWidth, availableHeight));
		scaleY = availableHeight/(double)Game.HEIGHT;
		scaleX = availableWidth/(double)Game.WIDTH;
	}
	
	/**
	 * Draw the scene and gui using a double buffer
	 * @param scene The current scene
	 * @param gui the player gui to draw
	 */
	public void render(Scene scene, GuiOverlay gui)
	{
		if(buffer == null || buffer.contentsLost())
		{
			createBufferStrategy(2);
			buffer = getBufferStrategy();
		}
		Graphics g = buffer.getDrawGraphics();
		((Graphics2D)g).scale(scaleX, scaleY);
		/////////////////Begin Draw
		
		g.setColor(Color.YELLOW);
		g.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
		g.setColor(Color.BLUE);
		scene.render(g);
		gui.render(g);
		////////////////End Draw
		
		if(!buffer.contentsLost())
			buffer.show();
		g.dispose();
	}
	
	/**
	 * Draws a preset screen other that a scene. 
	 * @param screen The scene ID
	 * @param extra Extra info for the scene
	 */
	public void render(int screen, String extra)
	{
		if(buffer == null || buffer.contentsLost())
		{
			createBufferStrategy(2);
			buffer = getBufferStrategy();
		}
		Graphics g = buffer.getDrawGraphics();
		((Graphics2D)g).scale(scaleX, scaleY);
		switch(screen)
		{
		case LOADING:
			g.setColor(Color.DARK_GRAY);
			g.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
			g.setFont(new Font("ARIAL", Font.PLAIN, 81));
			g.setColor(Color.WHITE);
			String loadingString = "LOADING:";
			g.drawString(loadingString, (Game.WIDTH/2)-(g.getFontMetrics().stringWidth(loadingString)/2), Game.HEIGHT/2 - (g.getFontMetrics().getHeight()/2));
			g.setColor(Color.LIGHT_GRAY);
			g.drawString(extra, (Game.WIDTH/2)-(g.getFontMetrics().stringWidth(extra)/2), Game.HEIGHT/2 + (g.getFontMetrics().getHeight()/2));
			
			break;
		}
		
		buffer.show();
		g.dispose();
	}
	
	public double getScaleX()
	{
		return scaleX;
	}
	
	public double getScaleY()
	{
		return scaleY;
	}
}
