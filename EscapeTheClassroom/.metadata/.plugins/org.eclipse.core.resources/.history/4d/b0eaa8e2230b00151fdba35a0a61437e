import java.awt.Color;
import java.awt.Graphics;


public class SceneCeiling extends Scene {

	private Item hangingKey;
	private boolean keyFell, keySwinging;
	private Point keyLocation;
	private ClickBox cbKey;
	
	public static final int
	KEY = 0;
	
	public SceneCeiling(Game game) 
	{
		super(game);
		setBackground("Ceiling.jpg");
		cbKey = addClickBox(725, 325, 50, 50, KEY);
		setSurroundings(Game.SceneName.south, Game.SceneName.east, Game.SceneName.north, Game.SceneName.west);
		rumble();
	}
	
	@Override
	public void onClickBoxPress(int id)
	{
		super.onClickBoxPress(id);
		switch(id)
		{
		case KEY:
			if(hangingKey != null)
			{
				getGame().getInventory().add(hangingKey);
				hangingKey = null;
				stopSwinging();
			}
			break;
		}
	}

	public void rumble()
	{
		hangingKey = new Item(Item.DOOR_KEY);
		keyFell = true;
		keyLocation = new Point(810, 325);
	}
	
	public boolean didKeyFall() 
	{
		return keyFell;
	}
	
	private void startSwinging()
	{
		keySwinging = true;
		new Thread(new Runnable()
		{
			private double t = -85;
			private int direction = 1;
			private int maxT = 85;
			@Override
			public void run() 
			{
				while(keySwinging)
				{
					if(t > maxT)
					{
						t = maxT;
						direction = -1;
						maxT--;
					}
					else if(t < -maxT)
					{
						t = -maxT;
						direction = 1;
						maxT--;
					}
					if(maxT <= 0)
					{
						stopSwinging();
						break;
					}
					t+= direction*(maxT + 1 -(Math.abs(t))) * .05;
					keyLocation.setX(810 + t);
					keyLocation.setY(-Math.pow((t/15.0), 2) + 325);
					cbKey.setX((int)keyLocation.getX());
					cbKey.setY((int)keyLocation.getY());

					getGame().repaint();
					try {
						Thread.sleep(20);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}).start();

	}
	
	private void stopSwinging()
	{
		keySwinging = false;
	}
	
	@Override
	public void onEnter() 
	{
		super.onEnter();
		startSwinging();
	}
	
	@Override
	public void onLeave()
	{
		super.onLeave();
		stopSwinging();
	}
	
	@Override
	public void render(Graphics g) 
	{
		super.render(g);
		if(hangingKey != null)
		{
			g.setColor(Color.BLACK);
			g.drawLine(810, 180, (int)keyLocation.getX(), (int)keyLocation.getY());
			g.drawImage(hangingKey.getIcon(), (int)keyLocation.getX(), (int)keyLocation.getY(), 50, 50, null);
		}
	}
}
