import java.awt.Color;
import java.awt.Graphics;


public class SceneCeiling extends Scene {

	private Item hangingKey;
	private boolean keyFell, keySwinging;
	private Point keyLocation;
	private ClickBox cbKey;
	private double keyT = -85;
	private int keyDirection = 1;
	private int keyMaxT = 85;
	
	public static final int
	KEY = 0;
	
	public SceneCeiling(Game game) 
	{
		super(game);
		setBackground("Ceiling.jpg");
		cbKey = addClickBox(725, 325, 50, 50, KEY);
		setSurroundings(Game.SceneName.south, Game.SceneName.east, Game.SceneName.north, Game.SceneName.west);
		rumble();
	}
	
	@Override
	public void onClickBoxPress(int id)
	{
		super.onClickBoxPress(id);
		switch(id)
		{
		case KEY:
			if(hangingKey != null)
			{
				getGame().getInventory().add(hangingKey);
				hangingKey = null;
				keySwinging = false;
			}
			break;
		}
	}

	public void rumble()
	{
		hangingKey = new Item(Item.DOOR_KEY);
		keyFell = true;
		keyLocation = new Point(810, 325);
		keySwinging = true;
	}
	
	public boolean didKeyFall() 
	{
		return keyFell;
	}
	
	@Override
	public void update() 
	{
		super.update();
		if(keySwinging)
		{
			System.out.println(keyDirection);
			keyT+= keyDirection*math.abs(keyMaxT + 1 -(keyT)) * .05;
			if(keyT >= keyMaxT && keyDirection == 1)
			{
				keyMaxT-=3;
				keyDirection = -1;
			}
			else if(keyT <= -keyMaxT && keyDirection == -1)
			{
				keyMaxT-=3;
				keyDirection = 1;
			}
			if(keyMaxT <= 0)
			{
				keySwinging = false;
			}
			keyLocation.setX(810 + keyT);
			keyLocation.setY(-Math.pow((keyT/15.0), 2) + 325);
			cbKey.setX((int)keyLocation.getX());
			cbKey.setY((int)keyLocation.getY());
		}
	}

	@Override
	public void render(Graphics g) 
	{
		super.render(g);
		if(hangingKey != null)
		{
			g.setColor(Color.BLACK);
			g.drawLine(810, 180, (int)keyLocation.getX() + 25, (int)keyLocation.getY() + 5);
			g.drawImage(hangingKey.getIcon(), (int)keyLocation.getX(), (int)keyLocation.getY(), 50, 50, null);
		}
	}
}
